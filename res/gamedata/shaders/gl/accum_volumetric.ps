#include "common.h"
#include "shadow.h"
#include "iostructs\p_volumetric.h"

#ifndef ISAMPLE
#define ISAMPLE 0
#endif

uniform float4              m_lmap        [2];
Texture2D 	s_noise;

#define	USE_LMAP
#define	USE_LMAPXFORM
#define	USE_SHADOW

//////////////////////////////////////////////////////////////////////////////////////////
// Pixel
#ifndef MSAA_OPTIMIZATION
float4 _main ( v2p I )
#else
float4 _main ( v2p I, uint iSample )
#endif
{
        // ----- shadow
	float4	P4	= float4(I.vPos, 1.0);
        float4	PS	= mul( m_shadow, P4);
        float	s	= 1.0;
        #ifdef	USE_SHADOW
//                #ifdef	USE_SJITTER
//                  s         = shadowtest        (PS,tcJ);
//                #else
//	TODO: DX10: Use lower quality shadow test
                  	s	= shadow(PS);
//                #endif
        #endif

        // ----- lightmap
        float4	lightmap = float4(1.0);
        #ifdef	USE_LMAP
                #ifdef	USE_LMAPXFORM
					PS.x	= dot( P4, m_lmap[0]);
					PS.y	= dot( P4, m_lmap[1]);
                #endif
                lightmap = tex2Dproj(s_lmap, PS);        //
        #endif

	// ----- attenuate
	float rsqr	= dot( I.lightToPos, I.lightToPos); // distance 2 light (squared)
  	float  att 	= saturate( 1 - rsqr * Ldynamic_pos.w ); // q-linear attenuate
	//float  att 	= saturate( 1 - (rsqr * Ldynamic_pos.w)*(rsqr * Ldynamic_pos.w) ); // q-linear attenuate
  	//float  att 	= 10.0*(1.0/(1.0+0.1*rsqr));
	//float  att 	= 1.0/rsqr;
	//float  att 	= 1.0/rsqr-Ldynamic_pos.w;
	//float  att 	= 5.0*(sqrt(1.0/rsqr)-sqrt(Ldynamic_pos.w));

	// ----- noise
	PS.xy /= PS.w;
	float time = timers.z*0.1;	
	PS.xy /= 3.0;
	PS.x += time;
	float4	t_noise	= tex2D(s_noise,PS.xy);
	PS.x -= time;
	PS.y -= time*0.70091;
	t_noise *= tex2D(s_noise,PS.xy);
	//t_noise *= 4.0;
	t_noise = t_noise*0.5+0.5;

	// out
	//float maxIntens = 1.0/100.0;
	//float maxIntens = 1.0/40.0;	
	//float maxIntens = 1.0/10.0;
	float maxIntens = I.fDensity;
	float3	result = float3(maxIntens * s * att);
	result *= lightmap.rgb;
	result *= Ldynamic_color.rgb * t_noise.rgb;

//	result = maxIntens;
//	result *= lightmap.rgb;

//	result = 0.1;
//	result = 0.0;
	return  float4( result, 0);
}