#include "common.h"
#include "mblur.h"
#include "dof.h"
#include "iostructs\p_naa_AA_combine.h"

// SkyLoader: temporary fix for FXAA
//#define USE_FXAA
#ifdef USE_FXAA
#include "fxaa.ps"

uniform float4		screen_res;		// Screen resolution (x-Width,y-Height, zw - 1/resolution)
#endif

//////////////////////////////////////////////////////////////////////////////////////////
#ifndef USE_MSAA
Texture2D 			s_distort;
#define	EPSDEPTH	0.001
#else
Texture2DMS s_distort;
#define	EPSDEPTH	0.001
#endif
uniform float4 		e_barrier;	// x=norm(.8), y=depth(.1), z=clr
uniform float4 		e_weights;	// x=norm, y=depth, z=clr
uniform float4 		e_kernel;	// x=norm, y=depth, z=clr
//////////////////////////////////////////////////////////////////////////////////////////
// Pixel

c2_out _main( v2p_aa_AA I )
{
	c2_out	res;
	res.Color = float4(0,0,0,0);

/*	
#ifdef USE_MSAA
	[unroll] for( uint iSample = 0; iSample < uint(MSAA_SAMPLES); ++iSample )
	{
#else // USE_MSAA	
	uint iSample = uint(0);
#endif
*/
	uint iSample = uint(0);

#ifdef GBUFFER_OPTIMIZATION
	gbuffer_data gbd	= gbuffer_load_data(I.Tex0, I.HPos, iSample );
#else
	gbuffer_data gbd	= gbuffer_load_data(I.Tex0, iSample );
#endif
	
#ifdef 	USE_DISTORT
//  	float 	depth 	= tex2D 	(s_position, 	I.tc0).z;
  	float 	depth 	= gbd.P.z;
#ifndef USE_MSAA
	float4 	distort	= tex2D		(s_distort, 	I.Tex0);
#else // USE_MSAA
	float4 	distort	= texelFetch( s_distort, int2( I.Tex0 * pos_decompression_params2.xy), int(iSample) );
#endif // USE_MSAA
	float2	offset	= (distort.xy-(127.0/255.0))*def_distort;  // fix newtral offset
	float2	center	= I.Tex0 + offset;

#ifdef GBUFFER_OPTIMIZATION
	gbuffer_data gbdx	= gbuffer_load_data_offset(I.Tex0, center, I.HPos, iSample );
#else
	gbuffer_data gbdx	= gbuffer_load_data_offset(I.Tex0, center, iSample);
#endif

//	float 	depth_x	= tex2D 	(s_position, center).z	;
	float 	depth_x	= gbdx.P.z;
	if ((depth_x+EPSDEPTH)<depth)	center	= I.Tex0;	// discard new sample
#else // USE_DISTORT
	float2	center 	= I.Tex0;
#endif

// SkyLoader: temporary fix for FXAA
#ifdef USE_FXAA
	float2 rcpFrame = float2(1.0/screen_res.x, 1.0/screen_res.y);

	float3	img	= FxaaPixelShader(center,
            FxaaFloat4(0.0, 0.0, 0.0, 0.0),		// FxaaFloat4 fxaaConsolePosPos,
            s_image,							// FxaaTex tex,
            s_image,							// FxaaTex fxaaConsole360TexExpBiasNegOne,
            s_image,							// FxaaTex fxaaConsole360TexExpBiasNegTwo,
            rcpFrame,							// FxaaFloat2 fxaaQualityRcpFrame,
            FxaaFloat4(0.0, 0.0, 0.0, 0.0),		// FxaaFloat4 fxaaConsoleRcpFrameOpt,
            FxaaFloat4(0.0, 0.0, 0.0, 0.0),		// FxaaFloat4 fxaaConsoleRcpFrameOpt2,
            FxaaFloat4(0.0, 0.0, 0.0, 0.0),		// FxaaFloat4 fxaaConsole360RcpFrameOpt2,
            0.35,									// FxaaFloat fxaaQualitySubpix,
            0.166,									// FxaaFloat fxaaQualityEdgeThreshold,
            0.0,								// FxaaFloat fxaaQualityEdgeThresholdMin,
            0.0,									// FxaaFloat fxaaConsoleEdgeSharpness,
            0.0,									// FxaaFloat fxaaConsoleEdgeThreshold,
            0.0,									// FxaaFloat fxaaConsoleEdgeThresholdMin,
            FxaaFloat4(0.0, 0.0, 0.0, 0.0)		// FxaaFloat fxaaConsole360ConstDir,
            ).rgb;
#else
	float3 	img 	= tex2D(s_image, center).rgb;
#endif

		img	= dof(img, center);

	float4 	bloom	= tex2D		(s_bloom, center);
	
//			img 	= mblur		(center,tex2D(s_position,I.tc0),img.rgb);
//			img 	= mblur( center, s_position.Sample( smp_nofilter, tc0), img.rgb);
			img 	= mblur( center, ( gbd ).P, img.rgb);

#ifdef 	USE_DISTORT
 	float3	blurred	= bloom.rgb*def_hdr	;
			img		= lerp	(img,blurred,distort.z);
#endif

/*
#ifdef USE_MSAA
 	res += combine_bloom( img, bloom ) / MSAA_SAMPLES;
	}
#else
 	res += combine_bloom( img, bloom );
#endif
*/
 	res.Color += combine_bloom( img, bloom );
#ifdef USE_MSAA
	float4 ptp = mul(m_P, float4(gbd.P, 1.0));
	res.Depth = ptp.w==0?1:ptp.z/ptp.w;
#endif
	
	return res;
}
