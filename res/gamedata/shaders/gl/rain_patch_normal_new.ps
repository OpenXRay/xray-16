#include "common.h"
#include "lmodel.h"
#include "shadow.h"
#include "iostructs\p_rain_patch.h"


uniform float3x4 m_sunmask;	// ortho-projection
//Texture2D	s_water;
Texture3D	s_water;
Texture2D	s_waterFall;
uniform float4	RainDensity;
uniform float4	RainFallof;
uniform float4	WorldX;	//	Float3	
uniform float4	WorldZ;	//	Float3	


float3	GetNVNMap( float2 tc, float time )
{
	//	Unpack NVidia normal map
//	float4 water = s_water.SampleLevel( smp_linear, float3(tc, time), 0 ) - 0.5;
//	float4 water = s_water.Sample( smp_linear, float3(tc, time)) - 0.5;
	float4 water = tex3D( s_water, float3(tc, time), -3.0 ) - 0.5;

	//	Swizzle
	water.xyz = water.wyz;

	//	Renormalize (*2) and scale (*3)
	water.xyz *= 6.0;

//	water.y = sqrt(1-water.x*water.x-water.z*water.z);
	water.y = 0.0;

	return water.xyz;
}


float3	GetWaterNMap( float2 tc )
{
	//	Unpack normal map
//	float4 water = s_texture.SampleLevel( smp_base, float3(tc, time), 0 );
	float4 water = tex2D( s_waterFall, tc );
	water.xyz = (water.xzy-0.5)*2.0;

//	water.xyz *= 3.0;

	water.xyz *= 0.3;

	water.y = 0.0;

	return water.xyz;
}


#ifndef ISAMPLE
#define ISAMPLE uint(0)
#endif


#ifdef GBUFFER_OPTIMIZATION
#ifdef MSAA_OPTIMIZATION
float4 _main ( float2 tc, float2 tcJ, float4	Color, float4 pos2d, uint iSample  )
#else
float4 _main ( float2 tc, float2 tcJ, float4	Color, float4 pos2d )
#endif
#else
#ifdef MSAA_OPTIMIZATION
float4 _main ( float2 tc, float2 tcJ, uint iSample )
#else
float4 _main ( float2 tc, float2 tcJ )
#endif
#endif
{
#ifdef GBUFFER_OPTIMIZATION
#ifdef MSAA_OPTIMIZATION
	gbuffer_data gbd = gbuffer_load_data( tc, pos2d, iSample );
#else
	gbuffer_data gbd = gbuffer_load_data( tc, pos2d, ISAMPLE );
#endif
#else
#ifdef MSAA_OPTIMIZATION
	gbuffer_data gbd = gbuffer_load_data( tc, iSample );
#else
	gbuffer_data gbd = gbuffer_load_data( tc, ISAMPLE );
#endif
#endif
	float4 _P = float4( gbd.P, 1.0 );
	float3 _N = gbd.N;
	float3	D = gbd.C;		// rgb	//.gloss

	_N.xyz = normalize(_N.xyz);

	float4 PS = mul( m_shadow,  _P );

	float3 WorldP	= mul( m_sunmask, _P );
	float3 WorldN	= mul( m_sunmask, _N.xyz );

	// Read rain projection with some jetter. Also adding pixel normal 
	// factor to jitter to make rain strips more realistic.
	float s	= shadow_rain( PS, WorldP.xz*1.1 - WorldN.xz*0.035 );	


	//	Apply distance falloff
	float	fAtten = 1.0 - smoothstep( RainFallof.x, RainFallof.y, length( _P.xyz ));
	s	*= fAtten*fAtten;

	//	Apply rain density
	s	*= RainDensity.x;

	float fIsUp = -dot( Ldynamic_dir.xyz, _N.xyz );
	s *= saturate(fIsUp*10.0+(10.0*0.5)+0.5);
	fIsUp = max(0.0, fIsUp);

	float fIsX = WorldN.x;
	float fIsZ = WorldN.z;

	float3 waterSplash = GetNVNMap( WorldP.xz, timers.x*3.0 );
//	float3 waterFallX = GetWaterNMap( float2(WorldP.x, WorldP.y-timers.x) );
//	float3 waterFallZ = GetWaterNMap( float2(WorldP.z, WorldP.y-timers.x) );

	float3 tc1 = WorldP / 2.0;

	float fAngleFactor = 1.0 - fIsUp;

	fAngleFactor = 0.1*ceil(10.0*fAngleFactor);

	//	Just slow down effect.
//	fAngleFactor *= 0.25;
	fAngleFactor *= 0.5;
//	fAngleFactor *= 1.3;

	float3 waterFallX = GetWaterNMap( float2(tc1.z, tc1.y+timers.x*fAngleFactor) );
	float3 waterFallZ = GetWaterNMap( float2(tc1.x, tc1.y+timers.x*fAngleFactor) );

	float2 IsDir = (float2(fIsZ, fIsX));

//	float2 IsDir = float2(0.0, 1.0);

	IsDir = normalize(IsDir);

	float3 waterFall = GetWaterNMap( float2( dot(tc1.xz, IsDir), tc1.y+timers.x) );
	
//	float WeaponAttenuation = smoothstep( 1.0, 1.1, length( _P.xyz ));
	float WeaponAttenuation = smoothstep( 0.8, 0.9, length( _P.xyz ));
	float ApplyNormalCoeff = s * WeaponAttenuation;

	float3 water = waterSplash*(fIsUp*ApplyNormalCoeff);

	water += waterFallX.yxz*(abs(fIsX)*ApplyNormalCoeff);
	water += waterFallZ.zxy*(abs(fIsZ)*ApplyNormalCoeff);

	//	Translate NM to view space
	water.xyz = mul( m_V, water.xyz );
	
	//return float4(water.xyz,1); // holger

	_N += water.xyz;

	_N = normalize(_N);

	s *= dot(D.xyz, float3(0.33, 0.33, 0.33));
//	s *= 0.5*fIsUp+0.5;

	return float4(_N,s);
}
