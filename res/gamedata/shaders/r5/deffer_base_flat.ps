#include "common.h"
#include "sload.h"

f_deffer main( p_flat I )
{
  f_deffer	O;

  // diffuse
  float3 D	= tbase		(I.tcdh);	// IN:  rgb.a
  float3 Ne		= normalize((float3)I.N.xyz);

#ifdef	USE_TDETAIL
//	D.rgb	= 2*D.rgb*tex2D	(s_detail, I.tcdbump).rgb;
	D.rgb	= 2*D.rgb * s_detail.Sample( smp_base, I.tcdbump ).rgb;
#endif

	// hemi,sun,material
	float 	ms	= xmaterial		;
#ifdef USE_LM_HEMI
	float4	lm 	= s_hemi.Sample( smp_rtlinear, I.lmh );
	float 	h  	= get_hemi(lm);
# ifdef USE_R2_STATIC_SUN
			ms 	= get_sun(lm);
# endif
#else
/*
//#if defined(SKIN_0) || defined(SKIN_1) || defined(SKIN_2) || defined(SKIN_3) || defined(SKIN_4) //SKIN_NONE
#ifdef SKIN_4
	//  Hemi cube lighting
	float3	Nw	= mul(m_inv_V, Ne);
	float3  hc_pos	= hemi_cube_pos_faces.xyz;
	float3	hc_neg	= hemi_cube_neg_faces.xyz;
	float3  hc_mixed = (Nw < 0) ? hc_neg : hc_pos;
	float	hemi_val = dot( hc_mixed, abs(Nw) );
	hemi_val	= saturate(hemi_val);
	float 	h	= hemi_val	;
#else*/
	float 	h	= I.position.w	;
//#endif
# ifdef USE_R2_STATIC_SUN
		 	ms	= I.tcdh.w		;
# endif
#endif

  // 2. Standart output
  O				= pack_gbuffer(
								float4	(Ne										, h ),
								float4( I.position.xyz + Ne.xyz*def_virtualh/2.h, ms ),
								float4( D.rgb, def_gloss ) );	// OUT: rgb.gloss

  return O;
}
