<?xml version="1.0" encoding="UTF-8"?><results version="2">    <cppcheck version="2.1"/>    <errors>        <error id="noCopyConstructor" severity="warning" msg="Class &apos;PointArray&apos; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &apos;PointArray&apos; does not have a copy constructor which is recommended since it has dynamic memory/resource allocation(s)." cwe="398">            <location file0="C:\OpenXRay\Externals\FreeMagic\Source\Approximation3D\MgcAppr3DEllipsoidFit.cpp" file="C:\OpenXRay\Externals\FreeMagic\Source\Approximation3D\MgcAppr3DEllipsoidFit.cpp" line="27" column="9"/>            <symbol>PointArray</symbol>        </error>        <error id="noOperatorEq" severity="warning" msg="Class &apos;PointArray&apos; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." verbose="Class &apos;PointArray&apos; does not have a operator= which is recommended since it has dynamic memory/resource allocation(s)." cwe="398">            <location file0="C:\OpenXRay\Externals\FreeMagic\Source\Approximation3D\MgcAppr3DEllipsoidFit.cpp" file="C:\OpenXRay\Externals\FreeMagic\Source\Approximation3D\MgcAppr3DEllipsoidFit.cpp" line="27" column="9"/>            <symbol>PointArray</symbol>        </error>        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">            <location file0="C:\OpenXRay\Externals\FreeMagic\Source\Approximation3D\MgcAppr3DEllipsoidFit.cpp" file="C:\OpenXRay\Externals\FreeMagic\Source\Approximation3D\MgcAppr3DEllipsoidFit.cpp" line="84" column="22"/>        </error>        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">            <location file0="C:\OpenXRay\Externals\FreeMagic\Source\Approximation3D\MgcAppr3DEllipsoidFit.cpp" file="C:\OpenXRay\Externals\FreeMagic\Source\Approximation3D\MgcAppr3DEllipsoidFit.cpp" line="85" column="31"/>        </error>        <error id="cstyleCast" severity="style" msg="C-style pointer casting" verbose="C-style pointer casting detected. C++ offers four different kinds of casts as replacements: static_cast, const_cast, dynamic_cast and reinterpret_cast. A C-style cast could evaluate to any of those automatically, thus it is considered safer if the programmer explicitly states which kind of cast is expected. See also: https://www.securecoding.cert.org/confluence/display/cplusplus/EXP05-CPP.+Do+not+use+C-style+casts." cwe="398">            <location file0="C:\OpenXRay\Externals\FreeMagic\Source\Approximation3D\MgcAppr3DEllipsoidFit.cpp" file="C:\OpenXRay\Externals\FreeMagic\Source\Approximation3D\MgcAppr3DEllipsoidFit.cpp" line="86" column="24"/>        </error>        <error id="unusedFunction" severity="style" msg="The function &apos;EllipsoidFit&apos; is never used." verbose="The function &apos;EllipsoidFit&apos; is never used." cwe="561">            <location file="C:\OpenXRay\Externals\FreeMagic\Source\Approximation3D\MgcAppr3DEllipsoidFit.cpp" line="146" column="0"/>            <symbol>EllipsoidFit</symbol>        </error>        <error id="unmatchedSuppression" severity="information" msg="Unmatched suppression: missingIncludeSystem" verbose="Unmatched suppression: missingIncludeSystem"/>        <error id="unmatchedSuppression" severity="information" msg="Unmatched suppression: preprocessorErrorDirective" verbose="Unmatched suppression: preprocessorErrorDirective"/>        <error id="unmatchedSuppression" severity="information" msg="Unmatched suppression: unknownMacro" verbose="Unmatched suppression: unknownMacro"/>        <error id="missingInclude" severity="information" msg="Cppcheck cannot find all the include files (use --check-config for details)" verbose="Cppcheck cannot find all the include files. Cppcheck can check the code without the include files found. But the results will probably be more accurate if all the include files are found. Please check your project&apos;s include directories and add all of them as include directories for Cppcheck. To see what files Cppcheck cannot find use --check-config."/>    </errors></results>