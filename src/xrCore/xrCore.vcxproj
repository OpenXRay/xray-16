<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" ToolsVersion="14.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Mixed|Win32">
      <Configuration>Mixed</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Mixed|x64">
      <Configuration>Mixed</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <ProjectGuid>{A0F7D1FB-59A7-4717-A7E4-96F37E91998E}</ProjectGuid>
    <RootNamespace>xrCore</RootNamespace>
    <Keyword>Win32Proj</Keyword>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <PlatformToolset>v141</PlatformToolset>
    <CharacterSet>MultiByte</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <PlatformToolset>v141</PlatformToolset>
    <CharacterSet>MultiByte</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Mixed|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <PlatformToolset>v141</PlatformToolset>
    <CharacterSet>MultiByte</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Mixed|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <PlatformToolset>v141</PlatformToolset>
    <CharacterSet>MultiByte</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <PlatformToolset>v141</PlatformToolset>
    <CharacterSet>MultiByte</CharacterSet>
    <WholeProgramOptimization>true</WholeProgramOptimization>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>DynamicLibrary</ConfigurationType>
    <PlatformToolset>v141</PlatformToolset>
    <CharacterSet>MultiByte</CharacterSet>
    <WholeProgramOptimization>true</WholeProgramOptimization>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$(SolutionDir)Common.props" />
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$(SolutionDir)Common.props" />
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Mixed|Win32'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$(SolutionDir)Common.props" />
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Mixed|x64'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$(SolutionDir)Common.props" />
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$(SolutionDir)Common.props" />
  </ImportGroup>
  <ImportGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="PropertySheets">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
    <Import Project="$(SolutionDir)Common.props" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup>
    <_ProjectFileVersion>12.0.30501.0</_ProjectFileVersion>
  </PropertyGroup>
  <ItemDefinitionGroup>
    <ClCompile>
      <LanguageStandard>stdcpp17</LanguageStandard>
    </ClCompile>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <AdditionalIncludeDirectories>$(xrExternals);$(xrExternals)lzo\include;$(xrExternals)pugixml\src;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <PreprocessorDefinitions>_USRDLL;XRCORE_EXPORTS;CRYPTO_BUILD;CI=$(CI);APPVEYOR=$(APPVEYOR);APPVEYOR_BUILD_VERSION=$(APPVEYOR_BUILD_VERSION);APPVEYOR_ACCOUNT_NAME=$(APPVEYOR_ACCOUNT_NAME);%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <EnableEnhancedInstructionSet>StreamingSIMDExtensions2</EnableEnhancedInstructionSet>
    </ClCompile>
    <Link>
      <AdditionalDependencies>PowrProf.lib;DbgHelp.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
    <PreBuildEvent>
      <Command>where /q git
if errorlevel 1 (
  echo git not found
  goto :EOF
)
echo git found
call .GitInfo.cmd</Command>
    </PreBuildEvent>
    <CustomBuildStep>
      <Command>if not exist "$(OutDir)FreeImage.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\FreeImage.dll" "$(OutDir)FreeImage.dll"
if not exist "$(OutDir)FreeImagePlus.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\FreeImagePlus.dll" "$(OutDir)FreeImagePlus.dll"

if not exist "$(OutDir)tbb_debug.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbb_debug.dll" "$(OutDir)tbb_debug.dll"
if not exist "$(OutDir)tbb_preview_debug.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbb_preview_debug.dll" "$(OutDir)tbb_preview_debug.dll"
if not exist "$(OutDir)tbbmalloc_debug.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc_debug.dll" "$(OutDir)tbbmalloc_debug.dll"
if not exist "$(OutDir)tbbmalloc_proxy_debug.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc_proxy_debug.dll" "$(OutDir)tbbmalloc_proxy_debug.dll"</Command>
      <Outputs>$(OutDir)FreeImage.dll;$(OutDir)FreeImagePlus.dll;$(OutDir)tbb_debug.dll;$(OutDir)tbb_preview_debug.dll;$(OutDir)tbbmalloc_debug.dll;$(OutDir)tbbmalloc_proxy_debug.dll;%(Outputs)</Outputs>
      <TreatOutputAsContent>true</TreatOutputAsContent>
      <Inputs>$(xrSdkDir)binaries\$(PlatformShortName)\FreeImage.dll;$(xrSdkDir)binaries\$(PlatformShortName)\FreeImagePlus.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbb_debug.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbb_preview_debug.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc_debug.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc_proxy_debug.dll;%(Inputs)</Inputs>
    </CustomBuildStep>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>$(xrExternals);$(xrExternals)lzo\include;$(xrExternals)pugixml\src;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <PreprocessorDefinitions>_USRDLL;XRCORE_EXPORTS;CRYPTO_BUILD;CI=$(CI);APPVEYOR=$(APPVEYOR);APPVEYOR_BUILD_VERSION=$(APPVEYOR_BUILD_VERSION);APPVEYOR_ACCOUNT_NAME=$(APPVEYOR_ACCOUNT_NAME);%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <AdditionalDependencies>PowrProf.lib;DbgHelp.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
    <PreBuildEvent>
      <Command>where /q git
if errorlevel 1 (
  echo git not found
  goto :EOF
)
echo git found
call .GitInfo.cmd</Command>
    </PreBuildEvent>
    <CustomBuildStep>
      <Command>if not exist "$(OutDir)FreeImage.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\FreeImage.dll" "$(OutDir)FreeImage.dll"
if not exist "$(OutDir)FreeImagePlus.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\FreeImagePlus.dll" "$(OutDir)FreeImagePlus.dll"

if not exist "$(OutDir)tbb_debug.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbb_debug.dll" "$(OutDir)tbb_debug.dll"
if not exist "$(OutDir)tbb_preview_debug.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbb_preview_debug.dll" "$(OutDir)tbb_preview_debug.dll"
if not exist "$(OutDir)tbbmalloc_debug.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc_debug.dll" "$(OutDir)tbbmalloc_debug.dll"
if not exist "$(OutDir)tbbmalloc_proxy_debug.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc_proxy_debug.dll" "$(OutDir)tbbmalloc_proxy_debug.dll"</Command>
      <Outputs>$(OutDir)FreeImage.dll;$(OutDir)FreeImagePlus.dll;$(OutDir)tbb_debug.dll;$(OutDir)tbb_preview_debug.dll;$(OutDir)tbbmalloc_debug.dll;$(OutDir)tbbmalloc_proxy_debug.dll;%(Outputs)</Outputs>
      <TreatOutputAsContent>true</TreatOutputAsContent>
      <Inputs>$(xrSdkDir)binaries\$(PlatformShortName)\FreeImage.dll;$(xrSdkDir)binaries\$(PlatformShortName)\FreeImagePlus.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbb_debug.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbb_preview_debug.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc_debug.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc_proxy_debug.dll;%(Inputs)</Inputs>
    </CustomBuildStep>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <AdditionalIncludeDirectories>$(xrExternals);$(xrExternals)lzo\include;$(xrExternals)pugixml\src;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <PreprocessorDefinitions>_USRDLL;XRCORE_EXPORTS;CRYPTO_BUILD;CI=$(CI);APPVEYOR=$(APPVEYOR);APPVEYOR_BUILD_VERSION=$(APPVEYOR_BUILD_VERSION);APPVEYOR_ACCOUNT_NAME=$(APPVEYOR_ACCOUNT_NAME);%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <EnableEnhancedInstructionSet>StreamingSIMDExtensions2</EnableEnhancedInstructionSet>
    </ClCompile>
    <Link>
      <AdditionalDependencies>PowrProf.lib;DbgHelp.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
    <PreBuildEvent>
      <Command>where /q git
if errorlevel 1 (
  echo git not found
  goto :EOF
)
echo git found
call .GitInfo.cmd</Command>
    </PreBuildEvent>
    <CustomBuildStep>
      <Command>if not exist "$(OutDir)FreeImage.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\FreeImage.dll" "$(OutDir)FreeImage.dll"
if not exist "$(OutDir)FreeImagePlus.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\FreeImagePlus.dll" "$(OutDir)FreeImagePlus.dll"

if not exist "$(OutDir)tbb.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbb.dll" "$(OutDir)tbb.dll"
if not exist "$(OutDir)tbb_preview.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbb_preview.dll" "$(OutDir)tbb_preview.dll"
if not exist "$(OutDir)tbbmalloc.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc.dll" "$(OutDir)tbbmalloc.dll"
if not exist "$(OutDir)tbbmalloc_proxy.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc_proxy.dll" "$(OutDir)tbbmalloc_proxy.dll"</Command>
      <Outputs>$(OutDir)FreeImage.dll;$(OutDir)FreeImagePlus.dll;$(OutDir)tbb.dll;$(OutDir)tbb_preview.dll;$(OutDir)tbbmalloc.dll;$(OutDir)tbbmalloc_proxy.dll;%(Outputs)</Outputs>
      <TreatOutputAsContent>true</TreatOutputAsContent>
      <Inputs>$(xrSdkDir)binaries\$(PlatformShortName)\FreeImage.dll;$(xrSdkDir)binaries\$(PlatformShortName)\FreeImagePlus.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbb.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbb_preview.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc_proxy.dll;%(Inputs)</Inputs>
    </CustomBuildStep>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>$(xrExternals);$(xrExternals)lzo\include;$(xrExternals)pugixml\src;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <PreprocessorDefinitions>_USRDLL;XRCORE_EXPORTS;CRYPTO_BUILD;CI=$(CI);APPVEYOR=$(APPVEYOR);APPVEYOR_BUILD_VERSION=$(APPVEYOR_BUILD_VERSION);APPVEYOR_ACCOUNT_NAME=$(APPVEYOR_ACCOUNT_NAME);%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <AdditionalDependencies>PowrProf.lib;DbgHelp.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
    <PreBuildEvent>
      <Command>where /q git
if errorlevel 1 (
  echo git not found
  goto :EOF
)
echo git found
call .GitInfo.cmd</Command>
    </PreBuildEvent>
    <CustomBuildStep>
      <Command>if not exist "$(OutDir)FreeImage.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\FreeImage.dll" "$(OutDir)FreeImage.dll"
if not exist "$(OutDir)FreeImagePlus.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\FreeImagePlus.dll" "$(OutDir)FreeImagePlus.dll"

if not exist "$(OutDir)tbb.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbb.dll" "$(OutDir)tbb.dll"
if not exist "$(OutDir)tbb_preview.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbb_preview.dll" "$(OutDir)tbb_preview.dll"
if not exist "$(OutDir)tbbmalloc.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc.dll" "$(OutDir)tbbmalloc.dll"
if not exist "$(OutDir)tbbmalloc_proxy.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc_proxy.dll" "$(OutDir)tbbmalloc_proxy.dll"</Command>
      <Outputs>$(OutDir)FreeImage.dll;$(OutDir)FreeImagePlus.dll;$(OutDir)tbb.dll;$(OutDir)tbb_preview.dll;$(OutDir)tbbmalloc.dll;$(OutDir)tbbmalloc_proxy.dll;%(Outputs)</Outputs>
      <TreatOutputAsContent>true</TreatOutputAsContent>
      <Inputs>$(xrSdkDir)binaries\$(PlatformShortName)\FreeImage.dll;$(xrSdkDir)binaries\$(PlatformShortName)\FreeImagePlus.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbb.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbb_preview.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc_proxy.dll;%(Inputs)</Inputs>
    </CustomBuildStep>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Mixed|Win32'">
    <ClCompile>
      <AdditionalIncludeDirectories>$(xrExternals);$(xrExternals)lzo\include;$(xrExternals)pugixml\src;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <PreprocessorDefinitions>_USRDLL;XRCORE_EXPORTS;CRYPTO_BUILD;CI=$(CI);APPVEYOR=$(APPVEYOR);APPVEYOR_BUILD_VERSION=$(APPVEYOR_BUILD_VERSION);APPVEYOR_ACCOUNT_NAME=$(APPVEYOR_ACCOUNT_NAME);%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <AdditionalDependencies>PowrProf.lib;DbgHelp.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
    <PreBuildEvent>
      <Command>where /q git
if errorlevel 1 (
  echo git not found
  goto :EOF
)
echo git found
call .GitInfo.cmd</Command>
    </PreBuildEvent>
    <CustomBuildStep>
      <Command>if not exist "$(OutDir)FreeImage.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\FreeImage.dll" "$(OutDir)FreeImage.dll"
if not exist "$(OutDir)FreeImagePlus.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\FreeImagePlus.dll" "$(OutDir)FreeImagePlus.dll"

if not exist "$(OutDir)tbb.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbb.dll" "$(OutDir)tbb.dll"
if not exist "$(OutDir)tbb_preview.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbb_preview.dll" "$(OutDir)tbb_preview.dll"
if not exist "$(OutDir)tbbmalloc.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc.dll" "$(OutDir)tbbmalloc.dll"
if not exist "$(OutDir)tbbmalloc_proxy.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc_proxy.dll" "$(OutDir)tbbmalloc_proxy.dll"</Command>
      <Outputs>$(OutDir)FreeImage.dll;$(OutDir)FreeImagePlus.dll;$(OutDir)tbb.dll;$(OutDir)tbb_preview.dll;$(OutDir)tbbmalloc.dll;$(OutDir)tbbmalloc_proxy.dll;%(Outputs)</Outputs>
      <TreatOutputAsContent>true</TreatOutputAsContent>
      <Inputs>$(xrSdkDir)binaries\$(PlatformShortName)\FreeImage.dll;$(xrSdkDir)binaries\$(PlatformShortName)\FreeImagePlus.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbb.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbb_preview.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc_proxy.dll;%(Inputs)</Inputs>
    </CustomBuildStep>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Mixed|x64'">
    <ClCompile>
      <AdditionalIncludeDirectories>$(xrExternals);$(xrExternals)lzo\include;$(xrExternals)pugixml\src;%(AdditionalIncludeDirectories)</AdditionalIncludeDirectories>
      <PreprocessorDefinitions>_USRDLL;XRCORE_EXPORTS;CRYPTO_BUILD;CI=$(CI);APPVEYOR=$(APPVEYOR);APPVEYOR_BUILD_VERSION=$(APPVEYOR_BUILD_VERSION);APPVEYOR_ACCOUNT_NAME=$(APPVEYOR_ACCOUNT_NAME);%(PreprocessorDefinitions)</PreprocessorDefinitions>
    </ClCompile>
    <Link>
      <AdditionalDependencies>PowrProf.lib;DbgHelp.lib;%(AdditionalDependencies)</AdditionalDependencies>
    </Link>
    <PreBuildEvent>
      <Command>where /q git
if errorlevel 1 (
  echo git not found
  goto :EOF
)
echo git found
call .GitInfo.cmd</Command>
    </PreBuildEvent>
    <CustomBuildStep>
      <Command>if not exist "$(OutDir)FreeImage.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\FreeImage.dll" "$(OutDir)FreeImage.dll"
if not exist "$(OutDir)FreeImagePlus.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\FreeImagePlus.dll" "$(OutDir)FreeImagePlus.dll"

if not exist "$(OutDir)tbb.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbb.dll" "$(OutDir)tbb.dll"
if not exist "$(OutDir)tbb_preview.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbb_preview.dll" "$(OutDir)tbb_preview.dll"
if not exist "$(OutDir)tbbmalloc.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc.dll" "$(OutDir)tbbmalloc.dll"
if not exist "$(OutDir)tbbmalloc_proxy.dll" copy /y "$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc_proxy.dll" "$(OutDir)tbbmalloc_proxy.dll"</Command>
      <Outputs>$(OutDir)FreeImage.dll;$(OutDir)FreeImagePlus.dll;$(OutDir)tbb.dll;$(OutDir)tbb_preview.dll;$(OutDir)tbbmalloc.dll;$(OutDir)tbbmalloc_proxy.dll;%(Outputs)</Outputs>
      <TreatOutputAsContent>true</TreatOutputAsContent>
      <Inputs>$(xrSdkDir)binaries\$(PlatformShortName)\FreeImage.dll;$(xrSdkDir)binaries\$(PlatformShortName)\FreeImagePlus.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbb.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbb_preview.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc.dll;$(xrSdkDir)binaries\$(PlatformShortName)\tbbmalloc_proxy.dll;%(Inputs)</Inputs>
    </CustomBuildStep>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClCompile Include="Animation\Bone.cpp" />
    <ClCompile Include="Animation\Envelope.cpp" />
    <ClCompile Include="Animation\interp.cpp" />
    <ClCompile Include="Animation\Motion.cpp" />
    <ClCompile Include="Animation\SkeletonMotions.cpp" />
    <ClCompile Include="clsid.cpp" />
    <ClCompile Include="Compression\lzo_compressor.cpp" />
    <ClCompile Include="Compression\Model.cpp">
      <PrecompiledHeader>NotUsing</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include="Compression\ppmd_compressor.cpp" />
    <ClCompile Include="Compression\rt_compressor.cpp" />
    <ClCompile Include="Compression\rt_compressor9.cpp" />
    <ClCompile Include="cpuid.cpp" />
    <ClCompile Include="crc32.cpp" />
    <ClCompile Include="Crypto\trivial_encryptor.cpp" />
    <ClCompile Include="Crypto\xr_dsa.cpp" />
    <ClCompile Include="Crypto\xr_dsa_signer.cpp" />
    <ClCompile Include="Crypto\xr_dsa_verifyer.cpp" />
    <ClCompile Include="Crypto\xr_sha.cpp" />
    <ClCompile Include="Debug\dxerr.cpp" />
    <ClCompile Include="Debug\MiniDump.cpp" />
    <ClCompile Include="dump_string.cpp" />
    <ClCompile Include="FileCRC32.cpp" />
    <ClCompile Include="FileSystem.cpp" />
    <ClCompile Include="FileSystem_borland.cpp" />
    <ClCompile Include="file_stream_reader.cpp" />
    <ClCompile Include="FMesh.cpp" />
    <ClCompile Include="FS.cpp" />
    <ClCompile Include="FTimer.cpp" />
    <ClCompile Include="LocatorAPI.cpp" />
    <ClCompile Include="LocatorAPI_auth.cpp" />
    <ClCompile Include="LocatorAPI_defs.cpp" />
    <ClCompile Include="log.cpp" />
    <ClCompile Include="LzHuf.cpp" />
    <ClCompile Include="Math\PLC_CPP.cpp" />
    <ClCompile Include="Math\PLC_SSE.cpp" />
    <ClCompile Include="Math\SkinXW_CPP.cpp" />
    <ClCompile Include="Math\SkinXW_SSE.cpp" />
    <ClCompile Include="Math\MathUtil.cpp" />
    <ClCompile Include="Media\Image.cpp" />
    <ClCompile Include="Memory\xrMemory_align.cpp" />
    <ClCompile Include="NET_utils.cpp" />
    <ClCompile Include="os_clipboard.cpp" />
    <ClCompile Include="PostProcess\PostProcess.cpp" />
    <ClCompile Include="PostProcess\PPInfo.cpp" />
    <ClCompile Include="stdafx.cpp">
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">Create</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">Create</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Mixed|Win32'">Create</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Mixed|x64'">Create</PrecompiledHeader>
      <ShowIncludes Condition="'$(Configuration)|$(Platform)'=='Mixed|Win32'">false</ShowIncludes>
      <ShowIncludes Condition="'$(Configuration)|$(Platform)'=='Mixed|x64'">false</ShowIncludes>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">Create</PrecompiledHeader>
      <PrecompiledHeader Condition="'$(Configuration)|$(Platform)'=='Release|x64'">Create</PrecompiledHeader>
    </ClCompile>
    <ClCompile Include="stream_reader.cpp" />
    <ClCompile Include="string_concatenations.cpp" />
    <ClCompile Include="Text\StringConversion.cpp" />
    <ClCompile Include="Threading\Event.cpp" />
    <ClCompile Include="Threading\ScopeLock.cpp" />
    <ClCompile Include="Threading\Lock.cpp" />
    <ClCompile Include="Threading\Task.cpp" />
    <ClCompile Include="Threading\TaskManager.cpp" />
    <ClCompile Include="XML\tinystr.cpp" />
    <ClCompile Include="XML\tinyxml.cpp" />
    <ClCompile Include="XML\tinyxmlerror.cpp" />
    <ClCompile Include="XML\tinyxmlparser.cpp" />
    <ClCompile Include="XML\XMLDocument.cpp" />
    <ClCompile Include="xrCore.cpp" />
    <ClCompile Include="ModuleLookup.cpp" />
    <ClCompile Include="xrDebug.cpp" />
    <ClCompile Include="xrMemory.cpp" />
    <ClCompile Include="xrsharedmem.cpp" />
    <ClCompile Include="xrstring.cpp" />
    <ClCompile Include="xr_ini.cpp" />
    <ClCompile Include="xr_shared.cpp" />
    <ClCompile Include="xr_token.cpp" />
    <ClCompile Include="xr_trims.cpp" />
    <ClCompile Include="_compressed_normal.cpp" />
    <ClCompile Include="_math.cpp" />
    <ClCompile Include="_sphere.cpp" />
    <ClCompile Include="_std_extensions.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="..\Common\GUID.hpp" />
    <ClInclude Include="..\Common\LevelStructure.hpp" />
    <ClInclude Include="..\Common\Noncopyable.hpp" />
    <ClInclude Include="..\Common\object_broker.h" />
    <ClInclude Include="..\Common\object_cloner.h" />
    <ClInclude Include="..\Common\object_comparer.h" />
    <ClInclude Include="..\Common\object_destroyer.h" />
    <ClInclude Include="..\Common\object_interfaces.h" />
    <ClInclude Include="..\Common\object_loader.h" />
    <ClInclude Include="..\Common\object_saver.h" />
    <ClInclude Include="..\Common\object_type_traits.h" />
    <ClInclude Include="..\Common\Util.hpp" />
    <ClInclude Include="..\Common\_d3d_extensions.h" />
    <ClInclude Include="Animation\Bone.hpp" />
    <ClInclude Include="Animation\Envelope.hpp" />
    <ClInclude Include="Animation\Motion.hpp" />
    <ClInclude Include="Animation\SkeletonMotionDefs.hpp" />
    <ClInclude Include="Animation\SkeletonMotions.hpp" />
    <ClInclude Include="buffer_vector.h" />
    <ClInclude Include="buffer_vector_inline.h" />
    <ClInclude Include="cdecl_cast.hpp" />
    <ClInclude Include="clsid.h" />
    <ClInclude Include="Compression\Coder.hpp" />
    <ClInclude Include="Compression\compression_ppmd_stream.h" />
    <ClInclude Include="Compression\compression_ppmd_stream_inline.h" />
    <ClInclude Include="Compression\lzo_compressor.h" />
    <ClInclude Include="Compression\PPMd.h" />
    <ClInclude Include="Compression\PPMdType.h" />
    <ClInclude Include="Compression\ppmd_compressor.h" />
    <ClInclude Include="Compression\rt_compressor.h" />
    <ClInclude Include="Compression\SubAlloc.hpp" />
    <ClInclude Include="Containers\AssociativeVector.hpp" />
    <ClInclude Include="Containers\AssociativeVectorComparer.hpp" />
    <ClInclude Include="Containers\FixedMap.h" />
    <ClInclude Include="cpuid.h" />
    <ClInclude Include="Crypto\trivial_encryptor.h" />
    <ClInclude Include="Crypto\xr_dsa.h" />
    <ClInclude Include="Crypto\xr_dsa_signer.h" />
    <ClInclude Include="Crypto\xr_dsa_verifyer.h" />
    <ClInclude Include="Crypto\xr_sha.h" />
    <ClInclude Include="Debug\dxerr.h" />
    <ClInclude Include="Debug\DXGetErrorDescription.inl">
      <FileType>CppHeader</FileType>
    </ClInclude>
    <ClInclude Include="Debug\MiniDump.h" />
    <ClInclude Include="dump_string.h" />
    <ClInclude Include="Events\Notifier.h" />
    <ClInclude Include="fastdelegate.h" />
    <CustomBuild Include="FileSystem.h" />
    <ClInclude Include="FileCRC32.h" />
    <ClInclude Include="file_stream_reader.h" />
    <ClInclude Include="FixedVector.h" />
    <ClInclude Include="FMesh.hpp" />
    <ClInclude Include="FS.h" />
    <ClInclude Include="FS_impl.h" />
    <ClInclude Include="FS_internal.h" />
    <ClInclude Include="FTimer.h" />
    <ClInclude Include="intrusive_ptr.h" />
    <ClInclude Include="LocatorAPI.h" />
    <ClInclude Include="LocatorAPI_defs.h" />
    <ClInclude Include="log.h" />
    <ClInclude Include="lzhuf.h" />
    <ClInclude Include="Math\PLC_CPP.hpp" />
    <ClInclude Include="Math\PLC_SSE.hpp" />
    <ClInclude Include="Math\Random32.hpp" />
    <ClInclude Include="Math\SkinXW_CPP.hpp" />
    <ClInclude Include="Math\SkinXW_SSE.hpp" />
    <ClInclude Include="Math\MathUtil.hpp" />
    <ClInclude Include="math_constants.h" />
    <ClInclude Include="Media\Image.hpp" />
    <ClInclude Include="Memory\xalloc.h" />
    <ClInclude Include="Memory\xrMemory_align.h" />
    <ClInclude Include="net_utils.h" />
    <ClInclude Include="os_clipboard.h" />
    <ClInclude Include="PostProcess\PostProcess.hpp" />
    <ClInclude Include="PostProcess\PPInfo.hpp" />
    <ClInclude Include="resource.h" />
    <ClInclude Include="stdafx.h" />
    <ClInclude Include="stream_reader.h" />
    <ClInclude Include="stream_reader_inline.h" />
    <ClInclude Include="string_concatenations.h" />
    <ClInclude Include="string_concatenations_inline.h" />
    <ClInclude Include="Text\StringConversion.hpp" />
    <ClInclude Include="Threading\Event.hpp" />
    <ClInclude Include="Threading\ScopeLock.hpp" />
    <ClInclude Include="Threading\Lock.hpp" />
    <ClInclude Include="Threading\Task.hpp" />
    <ClInclude Include="Threading\TaskManager.hpp" />
    <ClInclude Include="vector.h" />
    <ClInclude Include="XML\tinystr.h" />
    <ClInclude Include="XML\tinyxml.h" />
    <ClInclude Include="XML\XMLDocument.hpp" />
    <ClInclude Include="xrCore.h" />
    <ClInclude Include="ModuleLookup.hpp" />
    <ClInclude Include="xrCore_benchmark_macros.h" />
    <ClInclude Include="xrDebug.h" />
    <ClInclude Include="xrDebug_macros.h" />
    <ClInclude Include="xrDelegate\xrDelegate.h" />
    <ClInclude Include="xrDelegate\xrDelegateArguments.h" />
    <ClInclude Include="xrDelegate\xrDelegateBinder.h" />
    <ClInclude Include="xrMemory.h" />
    <ClInclude Include="xrPool.h" />
    <ClInclude Include="xrsharedmem.h" />
    <ClInclude Include="xrstring.h" />
    <ClInclude Include="xr_ini.h" />
    <ClInclude Include="xr_resource.h" />
    <ClInclude Include="xr_shared.h" />
    <ClInclude Include="xr_shortcut.h" />
    <ClInclude Include="xr_token.h" />
    <ClInclude Include="xr_trims.h" />
    <ClInclude Include="xr_vector_defs.h" />
    <ClInclude Include="_bitwise.h" />
    <ClInclude Include="_color.h" />
    <ClInclude Include="_compressed_normal.h" />
    <ClInclude Include="_cylinder.h" />
    <ClInclude Include="_fbox.h" />
    <ClInclude Include="_fbox2.h" />
    <ClInclude Include="_flags.h" />
    <ClInclude Include="_math.h" />
    <ClInclude Include="_matrix.h" />
    <ClInclude Include="_matrix33.h" />
    <ClInclude Include="_obb.h" />
    <ClInclude Include="_plane.h" />
    <ClInclude Include="_plane2.h" />
    <ClInclude Include="_quaternion.h" />
    <ClInclude Include="_random.h" />
    <ClInclude Include="_rect.h" />
    <ClInclude Include="_sphere.h" />
    <ClInclude Include="_std_extensions.h" />
    <ClInclude Include="_stl_extensions.h" />
    <ClInclude Include="_types.h" />
    <ClInclude Include="_vector2.h" />
    <ClInclude Include="_vector3d.h" />
    <ClInclude Include="_vector3d_ext.h" />
    <ClInclude Include="_vector4.h" />
  </ItemGroup>
  <ItemGroup>
    <ResourceCompile Include="xrCore.rc" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="Debug\DXGetErrorString.inl">
      <FileType>Document</FileType>
    </ClInclude>
  </ItemGroup>
  <ItemGroup>
    <None Include="Debug\DXTrace.inl" />
    <None Include="packages.config" />
  </ItemGroup>
  <ItemGroup>
    <ProjectReference Include="$(xrExternals)BugTrap.vcxproj">
      <Project>{e8cf1ada-264a-4127-86c2-fd7057d3792c}</Project>
    </ProjectReference>
    <ProjectReference Include="$(xrExternals)cryptlib.vcxproj">
      <Project>{c39f4b46-6e89-4074-902e-ca57073044d2}</Project>
    </ProjectReference>
    <ProjectReference Include="$(xrExternals)lzo.vcxproj">
      <Project>{614aa57f-58d7-45a8-a5ff-93f04b05fac6}</Project>
    </ProjectReference>
    <ProjectReference Include="$(SolutionDir)utils\xrMiscMath\xrMiscMath.vcxproj">
      <Project>{7885cf3c-ee04-4c67-9467-1fbf9a36b037}</Project>
    </ProjectReference>
    <ProjectReference Include="..\Layers\xrAPI\xrAPI.vcxproj">
      <Project>{1daec516-e52c-4a3c-a4da-ae3553e6e0f8}</Project>
    </ProjectReference>
  </ItemGroup>
  <ItemGroup>
    <Natvis Include="..\OpenXRay.natvis" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
    <Import Project="..\packages\sdl2.redist.2.0.5\build\native\sdl2.redist.targets" Condition="Exists('..\packages\sdl2.redist.2.0.5\build\native\sdl2.redist.targets')" />
    <Import Project="..\packages\sdl2.2.0.5\build\native\sdl2.targets" Condition="Exists('..\packages\sdl2.2.0.5\build\native\sdl2.targets')" />
  </ImportGroup>
  <ProjectExtensions>
    <VisualStudio>
      <UserProperties DevPartner_IsInstrumented="1" />
    </VisualStudio>
  </ProjectExtensions>
  <Target Name="EnsureNuGetPackageBuildImports" BeforeTargets="PrepareForBuild">
    <PropertyGroup>
      <ErrorText>Данный проект ссылается на пакеты NuGet, отсутствующие на этом компьютере. Используйте восстановление пакетов NuGet, чтобы скачать их.  Дополнительную информацию см. по адресу: http://go.microsoft.com/fwlink/?LinkID=322105. Отсутствует следующий файл: {0}.</ErrorText>
    </PropertyGroup>
    <Error Condition="!Exists('..\packages\sdl2.redist.2.0.5\build\native\sdl2.redist.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\sdl2.redist.2.0.5\build\native\sdl2.redist.targets'))" />
    <Error Condition="!Exists('..\packages\sdl2.2.0.5\build\native\sdl2.targets')" Text="$([System.String]::Format('$(ErrorText)', '..\packages\sdl2.2.0.5\build\native\sdl2.targets'))" />
  </Target>
</Project>